
./a.out:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <puts@plt-0x10>:
    1020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <puts@plt>:
    1030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 4018 <puts@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   $0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001040 <__stack_chk_fail@plt>:
    1040:	ff 25 da 2f 00 00    	jmp    *0x2fda(%rip)        # 4020 <__stack_chk_fail@GLIBC_2.4>
    1046:	68 01 00 00 00       	push   $0x1
    104b:	e9 d0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001050 <printf@plt>:
    1050:	ff 25 d2 2f 00 00    	jmp    *0x2fd2(%rip)        # 4028 <printf@GLIBC_2.2.5>
    1056:	68 02 00 00 00       	push   $0x2
    105b:	e9 c0 ff ff ff       	jmp    1020 <_init+0x20>

0000000000001060 <__isoc99_scanf@plt>:
    1060:	ff 25 ca 2f 00 00    	jmp    *0x2fca(%rip)        # 4030 <__isoc99_scanf@GLIBC_2.7>
    1066:	68 03 00 00 00       	push   $0x3
    106b:	e9 b0 ff ff ff       	jmp    1020 <_init+0x20>

Disassembly of section .text:

0000000000001070 <_start>:
    1070:	f3 0f 1e fa          	endbr64 
    1074:	31 ed                	xor    %ebp,%ebp
    1076:	49 89 d1             	mov    %rdx,%r9
    1079:	5e                   	pop    %rsi
    107a:	48 89 e2             	mov    %rsp,%rdx
    107d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1081:	50                   	push   %rax
    1082:	54                   	push   %rsp
    1083:	4c 8d 05 c6 02 00 00 	lea    0x2c6(%rip),%r8        # 1350 <__libc_csu_fini>
    108a:	48 8d 0d 4f 02 00 00 	lea    0x24f(%rip),%rcx        # 12e0 <__libc_csu_init>
    1091:	48 8d 3d d1 00 00 00 	lea    0xd1(%rip),%rdi        # 1169 <main>
    1098:	ff 15 42 2f 00 00    	call   *0x2f42(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    109e:	f4                   	hlt    
    109f:	90                   	nop

00000000000010a0 <deregister_tm_clones>:
    10a0:	48 8d 3d a9 2f 00 00 	lea    0x2fa9(%rip),%rdi        # 4050 <__TMC_END__>
    10a7:	48 8d 05 a2 2f 00 00 	lea    0x2fa2(%rip),%rax        # 4050 <__TMC_END__>
    10ae:	48 39 f8             	cmp    %rdi,%rax
    10b1:	74 15                	je     10c8 <deregister_tm_clones+0x28>
    10b3:	48 8b 05 1e 2f 00 00 	mov    0x2f1e(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    10ba:	48 85 c0             	test   %rax,%rax
    10bd:	74 09                	je     10c8 <deregister_tm_clones+0x28>
    10bf:	ff e0                	jmp    *%rax
    10c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    10c8:	c3                   	ret    
    10c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000010d0 <register_tm_clones>:
    10d0:	48 8d 3d 79 2f 00 00 	lea    0x2f79(%rip),%rdi        # 4050 <__TMC_END__>
    10d7:	48 8d 35 72 2f 00 00 	lea    0x2f72(%rip),%rsi        # 4050 <__TMC_END__>
    10de:	48 29 fe             	sub    %rdi,%rsi
    10e1:	48 89 f0             	mov    %rsi,%rax
    10e4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    10e8:	48 c1 f8 03          	sar    $0x3,%rax
    10ec:	48 01 c6             	add    %rax,%rsi
    10ef:	48 d1 fe             	sar    %rsi
    10f2:	74 14                	je     1108 <register_tm_clones+0x38>
    10f4:	48 8b 05 f5 2e 00 00 	mov    0x2ef5(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    10fb:	48 85 c0             	test   %rax,%rax
    10fe:	74 08                	je     1108 <register_tm_clones+0x38>
    1100:	ff e0                	jmp    *%rax
    1102:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1108:	c3                   	ret    
    1109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001110 <__do_global_dtors_aux>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	80 3d 35 2f 00 00 00 	cmpb   $0x0,0x2f35(%rip)        # 4050 <__TMC_END__>
    111b:	75 33                	jne    1150 <__do_global_dtors_aux+0x40>
    111d:	55                   	push   %rbp
    111e:	48 83 3d d2 2e 00 00 	cmpq   $0x0,0x2ed2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1125:	00 
    1126:	48 89 e5             	mov    %rsp,%rbp
    1129:	74 0d                	je     1138 <__do_global_dtors_aux+0x28>
    112b:	48 8b 3d 0e 2f 00 00 	mov    0x2f0e(%rip),%rdi        # 4040 <__dso_handle>
    1132:	ff 15 c0 2e 00 00    	call   *0x2ec0(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1138:	e8 63 ff ff ff       	call   10a0 <deregister_tm_clones>
    113d:	c6 05 0c 2f 00 00 01 	movb   $0x1,0x2f0c(%rip)        # 4050 <__TMC_END__>
    1144:	5d                   	pop    %rbp
    1145:	c3                   	ret    
    1146:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    114d:	00 00 00 
    1150:	c3                   	ret    
    1151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1158:	00 00 00 00 
    115c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001160 <frame_dummy>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	e9 67 ff ff ff       	jmp    10d0 <register_tm_clones>

0000000000001169 <main>:
int s = 20; // initiallized global variable --> .data
int z; // uninitiallized global variable --> .bss
// int z = 0; // initiallized with zero --> global variable --> .bss
int add_fun(int, int); // function declaration

int main() {
    1169:	55                   	push   %rbp
    116a:	48 89 e5             	mov    %rsp,%rbp
    116d:	48 83 ec 20          	sub    $0x20,%rsp
    1171:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1178:	00 00 
    117a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    117e:	31 c0                	xor    %eax,%eax
	static int x = 10; // .data segment
	// int x = 10;
	int y = 20;
    1180:	c7 45 e8 14 00 00 00 	movl   $0x14,-0x18(%rbp)
	int res = 0;
    1187:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	char a;
	printf("Enter a character: ");
    118e:	48 8d 3d 73 0e 00 00 	lea    0xe73(%rip),%rdi        # 2008 <con+0x4>
    1195:	b8 00 00 00 00       	mov    $0x0,%eax
    119a:	e8 b1 fe ff ff       	call   1050 <printf@plt>
	scanf("%c", &a);
    119f:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    11a3:	48 89 c6             	mov    %rax,%rsi
    11a6:	48 8d 3d 6f 0e 00 00 	lea    0xe6f(%rip),%rdi        # 201c <con+0x18>
    11ad:	b8 00 00 00 00       	mov    $0x0,%eax
    11b2:	e8 a9 fe ff ff       	call   1060 <__isoc99_scanf@plt>
	char *str = "viven\n"; // string created by using character pointer
    11b7:	48 8d 05 61 0e 00 00 	lea    0xe61(%rip),%rax        # 201f <con+0x1b>
    11be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	printf("Calling add function\n");
    11c2:	48 8d 3d 5d 0e 00 00 	lea    0xe5d(%rip),%rdi        # 2026 <con+0x22>
    11c9:	e8 62 fe ff ff       	call   1030 <puts@plt>
	res = add_fun(x,y);
    11ce:	8b 05 78 2e 00 00    	mov    0x2e78(%rip),%eax        # 404c <x.0>
    11d4:	8b 55 e8             	mov    -0x18(%rbp),%edx
    11d7:	89 d6                	mov    %edx,%esi
    11d9:	89 c7                	mov    %eax,%edi
    11db:	e8 c4 00 00 00       	call   12a4 <add_fun>
    11e0:	89 45 ec             	mov    %eax,-0x14(%rbp)
	printf("add function return: %d\n", res);
    11e3:	8b 45 ec             	mov    -0x14(%rbp),%eax
    11e6:	89 c6                	mov    %eax,%esi
    11e8:	48 8d 3d 4c 0e 00 00 	lea    0xe4c(%rip),%rdi        # 203b <con+0x37>
    11ef:	b8 00 00 00 00       	mov    $0x0,%eax
    11f4:	e8 57 fe ff ff       	call   1050 <printf@plt>
	printf("main(base address)----, %p\n", main); 
    11f9:	48 8d 35 69 ff ff ff 	lea    -0x97(%rip),%rsi        # 1169 <main>
    1200:	48 8d 3d 4d 0e 00 00 	lea    0xe4d(%rip),%rdi        # 2054 <con+0x50>
    1207:	b8 00 00 00 00       	mov    $0x0,%eax
    120c:	e8 3f fe ff ff       	call   1050 <printf@plt>
	printf("s---, %p\n", &s); 
    1211:	48 8d 35 30 2e 00 00 	lea    0x2e30(%rip),%rsi        # 4048 <s>
    1218:	48 8d 3d 51 0e 00 00 	lea    0xe51(%rip),%rdi        # 2070 <con+0x6c>
    121f:	b8 00 00 00 00       	mov    $0x0,%eax
    1224:	e8 27 fe ff ff       	call   1050 <printf@plt>
	printf("z---, %p\n", &z);
    1229:	48 8d 35 24 2e 00 00 	lea    0x2e24(%rip),%rsi        # 4054 <z>
    1230:	48 8d 3d 43 0e 00 00 	lea    0xe43(%rip),%rdi        # 207a <con+0x76>
    1237:	b8 00 00 00 00       	mov    $0x0,%eax
    123c:	e8 0f fe ff ff       	call   1050 <printf@plt>
	printf("con---, %p\n", &con);
    1241:	48 8d 35 bc 0d 00 00 	lea    0xdbc(%rip),%rsi        # 2004 <con>
    1248:	48 8d 3d 35 0e 00 00 	lea    0xe35(%rip),%rdi        # 2084 <con+0x80>
    124f:	b8 00 00 00 00       	mov    $0x0,%eax
    1254:	e8 f7 fd ff ff       	call   1050 <printf@plt>
	printf("x---, %p\n", &x);
    1259:	48 8d 35 ec 2d 00 00 	lea    0x2dec(%rip),%rsi        # 404c <x.0>
    1260:	48 8d 3d 29 0e 00 00 	lea    0xe29(%rip),%rdi        # 2090 <con+0x8c>
    1267:	b8 00 00 00 00       	mov    $0x0,%eax
    126c:	e8 df fd ff ff       	call   1050 <printf@plt>
	printf("str---, %p\n", str);
    1271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1275:	48 89 c6             	mov    %rax,%rsi
    1278:	48 8d 3d 1b 0e 00 00 	lea    0xe1b(%rip),%rdi        # 209a <con+0x96>
    127f:	b8 00 00 00 00       	mov    $0x0,%eax
    1284:	e8 c7 fd ff ff       	call   1050 <printf@plt>
    1289:	b8 00 00 00 00       	mov    $0x0,%eax
}
    128e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    1292:	64 48 2b 0c 25 28 00 	sub    %fs:0x28,%rcx
    1299:	00 00 
    129b:	74 05                	je     12a2 <main+0x139>
    129d:	e8 9e fd ff ff       	call   1040 <__stack_chk_fail@plt>
    12a2:	c9                   	leave  
    12a3:	c3                   	ret    

00000000000012a4 <add_fun>:

int add_fun(int x, int y) { // function definition
    12a4:	55                   	push   %rbp
    12a5:	48 89 e5             	mov    %rsp,%rbp
    12a8:	48 83 ec 10          	sub    $0x10,%rsp
    12ac:	89 7d fc             	mov    %edi,-0x4(%rbp)
    12af:	89 75 f8             	mov    %esi,-0x8(%rbp)
	printf("add(base address)---, %p\n", add_fun);
    12b2:	48 8d 35 eb ff ff ff 	lea    -0x15(%rip),%rsi        # 12a4 <add_fun>
    12b9:	48 8d 3d e6 0d 00 00 	lea    0xde6(%rip),%rdi        # 20a6 <con+0xa2>
    12c0:	b8 00 00 00 00       	mov    $0x0,%eax
    12c5:	e8 86 fd ff ff       	call   1050 <printf@plt>
	return x+y;
    12ca:	8b 55 fc             	mov    -0x4(%rbp),%edx
    12cd:	8b 45 f8             	mov    -0x8(%rbp),%eax
    12d0:	01 d0                	add    %edx,%eax
}
    12d2:	c9                   	leave  
    12d3:	c3                   	ret    
    12d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    12db:	00 00 00 
    12de:	66 90                	xchg   %ax,%ax

00000000000012e0 <__libc_csu_init>:
    12e0:	f3 0f 1e fa          	endbr64 
    12e4:	41 57                	push   %r15
    12e6:	4c 8d 3d fb 2a 00 00 	lea    0x2afb(%rip),%r15        # 3de8 <__frame_dummy_init_array_entry>
    12ed:	41 56                	push   %r14
    12ef:	49 89 d6             	mov    %rdx,%r14
    12f2:	41 55                	push   %r13
    12f4:	49 89 f5             	mov    %rsi,%r13
    12f7:	41 54                	push   %r12
    12f9:	41 89 fc             	mov    %edi,%r12d
    12fc:	55                   	push   %rbp
    12fd:	48 8d 2d ec 2a 00 00 	lea    0x2aec(%rip),%rbp        # 3df0 <__do_global_dtors_aux_fini_array_entry>
    1304:	53                   	push   %rbx
    1305:	4c 29 fd             	sub    %r15,%rbp
    1308:	48 83 ec 08          	sub    $0x8,%rsp
    130c:	e8 ef fc ff ff       	call   1000 <_init>
    1311:	48 c1 fd 03          	sar    $0x3,%rbp
    1315:	74 1f                	je     1336 <__libc_csu_init+0x56>
    1317:	31 db                	xor    %ebx,%ebx
    1319:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1320:	4c 89 f2             	mov    %r14,%rdx
    1323:	4c 89 ee             	mov    %r13,%rsi
    1326:	44 89 e7             	mov    %r12d,%edi
    1329:	41 ff 14 df          	call   *(%r15,%rbx,8)
    132d:	48 83 c3 01          	add    $0x1,%rbx
    1331:	48 39 dd             	cmp    %rbx,%rbp
    1334:	75 ea                	jne    1320 <__libc_csu_init+0x40>
    1336:	48 83 c4 08          	add    $0x8,%rsp
    133a:	5b                   	pop    %rbx
    133b:	5d                   	pop    %rbp
    133c:	41 5c                	pop    %r12
    133e:	41 5d                	pop    %r13
    1340:	41 5e                	pop    %r14
    1342:	41 5f                	pop    %r15
    1344:	c3                   	ret    
    1345:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    134c:	00 00 00 00 

0000000000001350 <__libc_csu_fini>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	c3                   	ret    

Disassembly of section .fini:

0000000000001358 <_fini>:
    1358:	f3 0f 1e fa          	endbr64 
    135c:	48 83 ec 08          	sub    $0x8,%rsp
    1360:	48 83 c4 08          	add    $0x8,%rsp
    1364:	c3                   	ret    
